{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Android Init RC File",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#action"
		},
		{
			"include": "#service"
		},
		{
			"include": "#import"
		}
	],
	"repository": {
		"action": {
			"begin": "^\\s*(on)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.on.rc"
				}
			},
			"end": "^(?=\\s*(on|service|import)\\s+)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#trigger-expression"
				},
				{
					"include": "#property-expansion"
				},
				{
					"include": "#command"
				}
			]
		},
		"service": {
			"begin": "^\\s*(service)\\s+([^\\s]+)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.service.rc"
				},
				"2": {
					"name": "entity.name.class.service.rc"
				}
			},
			"end": "^(?=\\s*(on|service|import)\\s+)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#property-expansion"
				},
				{
					"include": "#option"
				},
				{
					"_comment": "Currently not working",
					"include": "#shellcommand"
				}
			]
		},
		"import": {
			"match": "^\\s*(import)\\s+([^\\0]+)",
			"captures": {
				"1": {
					"name": "keyword.other.import.rc"
				},
				"2": {
					"name": "string.unquoted.rc",
					"patterns": [
						{
							"include": "#property-expansion"
						}
					]
				}
			},
			"patterns": [
				{
					"include": "#comment"
				}
			]
		},
		"option": {
			"match": "^\\s*(capabilities|class|console|critical|disabled|enter_namespace|file|gentle_kill|group|interface|ioprio|keycodes|memcg.[\\w]+|namespace|oneshot|onrestart|override|priority|reboot_on_failure|restart_period|rlimit|seclabel|setenv|shutdown|sigstop|socket|stdio_to_kmsg|task_profiles|timeout_period|updatable|user|writepid)\\s+(.*)",
			"captures": {
				"1": {
					"name": "keyword.control.option.rc"
				},
				"2": {
					"name": "support.variable.rc",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#number"
						},
						{
							"include": "#boolean"
						},
						{
							"include": "#string"
						},
						{
							"include": "#property-expansion"
						}
					]
				}
			}
		},
		"command": {
			"patterns": [
				{
					"begin": "^\\s*(bootchart|chmod|chown|class_start|class_stop|class_reset|class_restart|copy|copy_per_line|domainname|enable|exec|exec_background|export|hostname|ifup|insmod|interface_start|interface_stop|interface_restart|load_exports|load_system_props|load_persist_props|loglevel|mark_post_data|mkdir|mount_all|mount|perform_apex_config|restorecon|restorecon_recursive|rm|rmdir|readahead|setprop|setrlimit|swapon_all|symlink|sysclktz|trigger|umount|umount_all|verity_update_state|wait|wait_for_prop|write)\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.command.rc"
						}
					},
					"end": "\\n",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#number"
						},
						{
							"include": "#boolean"
						},
						{
							"include": "#string"
						},
						{
							"include": "#property-expansion"
						}
					]
				},
				{
					"match": "^\\s*(exec_start|restart|start|stop)(\\s+(--only-if-running))?\\s+(.*)",
					"captures": {
						"1": {
							"name": "keyword.control.rc"
						},
						"3": {
							"name": "keyword.other.rc"
						},
						"4": {
							"name": "entity.name.class.rc",
							"patterns": [
								{
									"include": "#comment"
								},
								{
									"include": "#property-expansion"
								}
							]
						}
					}
				}
			]
		},
		"trigger-expression": {
			"patterns": [
				{
					"include": "#trigger"
				},
				{
					"begin": "\\s*(&&)\\s*",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.trigger.and.rc"
						}
					},
					"end": "$",
					"patterns": [
						{
							"include": "#trigger-expression"
						}
					]
				},
				{
					"begin": "(\\\\)\\n",
					"beginCaptures": {
						"1": {
							"name": "constant.character.escape.newline.rc"
						}
					},
					"end": "$",
					"patterns": [
						{
							"include": "#trigger-expression"
						}
					]
				}
			]
		},
		"trigger": {
			"patterns": [
				{
					"include": "#number"
				},
				{
					"include": "#boolean"
				},
				{
					"include": "#string"
				},
				{
					"include": "#property-expansion"
				},
				{
					"name": "support.variable.trigger.rc",
					"match": "[\\w-]+"
				}
			]
		},
		"property-expansion": {
			"begin": "(\\$)(\\{)",
			"end": "\\}",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.expansion.property.rc"
				},
				"2": {
					"name": "keyword.operator.expansion.property.rc"
				}
			},
			"endCaptures": {
				"0": {
					"name": "keyword.operator.expansion.property.rc"
				}
			},
			"contentName": "string.interpolated.property.rc",
			"patterns": [
				{
					"match": "\\.",
					"name": "keyword.operator.dot-access.property.rc"
				},
				{
					"match": "(:-)([^{}]+)",
					"captures": {
						"1":{
							"name": "keyword.operator.expansion.property.default.rc"
						},
						"2": {
							"name": "meta.expansion.property.default.rc",
							"patterns": [
								{
									"include": "#number"
								},
								{
									"include": "#boolean"
								},
								{
									"include": "#string"
								}
							]
						}
					}
				},
				{
					"match": ":-",
					"name": "keyword.operator.expansion.property.default.rc"
				},
				{
					"match": "(?<!\\w)[a-zA-Z_0-9-]+(?!\\w)",
					"name": "variable.other.normal.rc"
				},
				{
					"include": "#property-expansion"
				}
			]
		},
		"string": {
			"name": "string.quoted.double.rc",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.rc",
					"match": "\\\\."
				}
			]
		},
		"number": {
			"name": "constant.numeric.rc",
			"match": "(\\+|-)?\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b",
			"captures": {
				"1": {
					"name": "keyword.operator.arithmetic.rc"
				}
			}
		},
		"boolean": {
			"name": "constant.language.rc",
			"match": "\\b(true|false)\\b"
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.line.double-slash.rc",
					"begin": "(?<!\\\\)#",
					"end": "$\\n?"
				}
			]
		},
		"shellcommand": {
			"name": "meta.embedded.inline.shellscript",
			"patterns": [
				{
					"include": "source.shell"
				}
			]
		}
	},
	"scopeName": "source.rc"
}
